package actions

import (
	"fmt"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"gobuff_boilerplate/models"
	"net/http"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Payment)
// DB Table: Plural (payments)
// Resource: Plural (Payments)
// Path: Plural (/payments)
// View Template Folder: Plural (/templates/payments/)

// PaymentsResource is the resource for the Payment model
type PaymentsResource struct {
	buffalo.Resource
}

// List gets all Payments. This function is mapped to the path
// GET /payments
func (v PaymentsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	payments := &models.Payments{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Payments from the DB
	if err := q.All(payments); err != nil {
		return err
	}

	return c.Render(200, r.JSON(payments))
}

// Show gets the data for one Payment. This function is mapped to
// the path GET /payments/{payment_id}
func (v PaymentsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Payment
	payment := &models.Payment{}

	// To find the Payment the parameter payment_id is used.
	if err := tx.Find(payment, c.Param("payment_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return c.Render(200, r.JSON(payment))
}

// Create adds a Payment to the DB. This function is mapped to the
// path POST /payments
func (v PaymentsResource) Create(c buffalo.Context) error {
	// Allocate an empty Payment
	payment := &models.Payment{}

	// Bind payment to the html form elements
	if err := c.Bind(payment); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(payment)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
	}

	return c.Render(http.StatusCreated, r.JSON(payment))
}

// Update changes a Payment in the DB. This function is mapped to
// the path PUT /payments/{payment_id}
func (v PaymentsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Payment
	payment := &models.Payment{}

	if err := tx.Find(payment, c.Param("payment_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Payment to the html form elements
	if err := c.Bind(payment); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(payment)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
	}

	return c.Render(http.StatusOK, r.JSON(payment))
}

// Destroy deletes a Payment from the DB. This function is mapped
// to the path DELETE /payments/{payment_id}
func (v PaymentsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Payment
	payment := &models.Payment{}

	// To find the Payment the parameter payment_id is used.
	if err := tx.Find(payment, c.Param("payment_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(payment); err != nil {
		return err
	}

	return c.Render(http.StatusOK, r.JSON(payment))
}
